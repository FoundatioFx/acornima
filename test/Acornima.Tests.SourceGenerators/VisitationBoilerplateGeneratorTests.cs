using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Acornima.SourceGenerators;
using Microsoft.CodeAnalysis;
using Xunit;

namespace Acornima.Tests.SourceGenerators;

public class VisitationBoilerplateGeneratorTests : SourceGeneratorTest
{
    [Fact]
    public Task VisitationBoilerplateGeneration()
    {
        var sourceFiles = Directory.EnumerateFiles(ToSourcePath("Ast"), "*.cs", SearchOption.AllDirectories)
            .Concat(Directory.EnumerateFiles(ToSourcePath("Jsx/Ast", ExtrasProject), "*.cs", SearchOption.AllDirectories))
            .Concat(new[]
            {
                ToSourcePath("AutoGeneratedAstVisitorAttribute.cs"),
                ToSourcePath("AstVisitor.cs"),
                ToSourcePath("AstRewriter.cs"),
                ToSourcePath("Jsx/IJsxAstVisitor.cs", ExtrasProject),
                ToSourcePath("Jsx/JsxAstVisitor.cs", ExtrasProject),
                ToSourcePath("Jsx/JsxAstRewriter.cs", ExtrasProject),
            })
            .Select(File.ReadAllText)
            .ToArray();

        var references =
            new[]
            {
                typeof(object).Assembly,
            }
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .ToArray();

        return VerifyHelper.Verify<VisitationBoilerplateGenerator>(sourceFiles, references);
    }
}
