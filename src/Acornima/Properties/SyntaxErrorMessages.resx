<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContinuousNumericSeparator" xml:space="preserve">
    <value>Only one underscore is allowed as numeric separator</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="InvalidEscapedReservedWord" xml:space="preserve">
    <value>Keyword must not contain escaped characters</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="InvalidHexEscapeSequence" xml:space="preserve">
    <value>Invalid hexadecimal escape sequence</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="InvalidOrUnexpectedToken" xml:space="preserve">
    <value>Invalid or unexpected token</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="InvalidRegExpFlags" xml:space="preserve">
    <value>Invalid regular expression flags</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="InvalidUnicodeEscapeSequence" xml:space="preserve">
    <value>Invalid Unicode escape sequence</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="RegExpDuplicateCaptureGroupName" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Duplicate capture group name</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpIncompleteQuantifier" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Incomplete quantifier</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidCaptureGroupName" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid capture group name</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidCharacterClass" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid character class</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidClassEscape" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid class escape</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidClassPropertyName" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid property name in character class</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidDecimalEscape" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid decimal escape</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidEscape" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid escape</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidGroup" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid group</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidNamedCaptureReference" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid named capture referenced</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidNamedReference" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid named reference</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidPropertyName" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid property name</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidQuantifier" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid quantifier</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpInvalidUnicodeEscape" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Invalid Unicode escape</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpLoneQuantifierBrackets" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Lone quantifier brackets</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpNothingToRepeat" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Nothing to repeat</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpRangeOutOfOrder" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: numbers out of order in {{}} quantifier</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpRangeOutOfOrderCharacterClass" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Range out of order in character class</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpUnmatchedParen" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Unmatched ')'</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpUnterminatedCharacterClass" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Unterminated character class</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="RegExpUnterminatedGroup" xml:space="preserve">
    <value>Invalid regular expression: /{0}/{1}: Unterminated group</value>
    <comment>https://github.com/v8/v8/blob/main/src/regexp/regexp-error.h</comment>
  </data>
  <data name="Strict8Or9Escape" xml:space="preserve">
    <value>\8 and \9 are not allowed in strict mode</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="StrictDecimalWithLeadingZero" xml:space="preserve">
    <value>Decimals with leading zeros are not allowed in strict mode</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="StrictOctalEscape" xml:space="preserve">
    <value>Octal escape sequences are not allowed in strict mode</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="StrictOctalLiteral" xml:space="preserve">
    <value>Octal literals are not allowed in strict mode</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="Template8Or9Escape" xml:space="preserve">
    <value>\8 and \9 are not allowed in template strings</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="TemplateOctalLiteral" xml:space="preserve">
    <value>Octal escape sequences are not allowed in template strings</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="TrailingNumericSeparator" xml:space="preserve">
    <value>Numeric separators are not allowed at the end of numeric literals</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UndefinedUnicodeCodePoint" xml:space="preserve">
    <value>Undefined Unicode code-point</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnexpectedEOS" xml:space="preserve">
    <value>Unexpected end of input</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnexpectedTemplateString" xml:space="preserve">
    <value>Unexpected template string</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnexpectedToken" xml:space="preserve">
    <value>Unexpected token '{0}'</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnexpectedTokenIdentifier" xml:space="preserve">
    <value>Unexpected identifier '{0}'</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnexpectedTokenNumber" xml:space="preserve">
    <value>Unexpected number</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnexpectedTokenRegExp" xml:space="preserve">
    <value>Unexpected regular expression</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnexpectedTokenString" xml:space="preserve">
    <value>Unexpected string</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnterminatedRegExp" xml:space="preserve">
    <value>Invalid regular expression: missing /</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="UnterminatedTemplateExpr" xml:space="preserve">
    <value>Missing } in template expression</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
  <data name="ZeroDigitNumericSeparator" xml:space="preserve">
    <value>Numeric separator can not be used after leading 0</value>
    <comment>https://github.com/v8/v8/blob/main/src/common/message-template.h</comment>
  </data>
</root>