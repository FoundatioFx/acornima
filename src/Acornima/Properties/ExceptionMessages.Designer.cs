//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Acornima {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Acornima.Properties.ExceptionMessages", typeof(ExceptionMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A concurrent update was performed on this object and corrupted its state..
        /// </summary>
        internal static string ConcurrentUpdatePerformed {
            get {
                return ResourceManager.GetString("ConcurrentUpdatePerformed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To parse input as module code, you need to configure the parser to use ECMAScript version {0} or newer..
        /// </summary>
        internal static string InvalidEcmaVersionForModule {
            get {
                return ResourceManager.GetString("InvalidEcmaVersionForModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To parse input in strict mode, you need to configure the parser to use ECMAScript version {0} or newer..
        /// </summary>
        internal static string InvalidEcmaVersionForStrictMode {
            get {
                return ResourceManager.GetString("InvalidEcmaVersionForStrictMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input string was not in a correct format..
        /// </summary>
        internal static string InvalidFormat {
            get {
                return ResourceManager.GetString("InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rewriting a node of type {0} must return a non-null value of the same type. Alternatively, override the visitor method and change it not to visit children of this type..
        /// </summary>
        internal static string MustRewriteToSameNodeNonNullable {
            get {
                return ResourceManager.GetString("MustRewriteToSameNodeNonNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rewriting a node of type {0} must return null or a non-null value of the same type. Alternatively, override the visitor method and change it not to visit children of this type..
        /// </summary>
        internal static string MustRewriteToSameNodeNullable {
            get {
                return ResourceManager.GetString("MustRewriteToSameNodeNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-defined node types should override the {0} method and provide an actual implementation..
        /// </summary>
        internal static string OverrideGetChildNodes {
            get {
                return ResourceManager.GetString("OverrideGetChildNodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ECMAScript version {0} is not supported..
        /// </summary>
        internal static string UnsupportedEcmaVersion {
            get {
                return ResourceManager.GetString("UnsupportedEcmaVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The visitor does not support nodes of type {0}. You can override {1} to handle this case..
        /// </summary>
        internal static string UnsupportedNodeTypeVisited {
            get {
                return ResourceManager.GetString("UnsupportedNodeTypeVisited", resourceCulture);
            }
        }
    }
}
